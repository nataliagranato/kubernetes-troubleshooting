apiVersion: v1
kind: Service
metadata:
  name: svc-error1
  namespace: svc-errs
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: non-existent-app
---
apiVersion: v1
kind: Pod
metadata:
  name: svc-error2
  namespace: svc-errs
spec:
  containers:
    - name: busybox
      image: busybox
      command: ["sh", "-c", "curl http://10.255.255.1"]
---
apiVersion: v1
kind: Pod
metadata:
  name: svc-error3
  namespace: svc-errs
spec:
  containers:
    - name: busybox
      image: busybox
      command: ["sh", "-c", "curl http://nonexistent.example"]
---
apiVersion: v1
kind: Pod
metadata:
  name: svc-error4
  namespace: svc-errs
spec:
  containers:
    - name: busybox
      image: busybox
      command: ["sh", "-c", "curl http://localhost:81"]
---
apiVersion: v1
kind: Pod
metadata:
  name: svc-error5
  namespace: svc-errs
spec:
  containers:
    - name: busybox
      image: busybox
      command: ["sh", "-c", "curl http://10.255.255.2"]
---
apiVersion: v1
kind: Node
metadata:
  name: network-plugin-not-ready
spec:
  taints:
    - key: node.kubernetes.io/network-unavailable
      value: "true"
      effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: svc-error6
  namespace: svc-errs
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: some-app
---
apiVersion: v1
kind: Service
metadata:
  name: svc-error7
  namespace: svc-errs
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: another-app
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: wrong-netpolicy
  namespace: default
spec:
  podSelector:
    matchLabels: {}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - ipBlock:
            cidr: 192.168.0.0/24
---
apiVersion: v1
kind: Pod
metadata:
  name: first-pod
  labels:
    app: hello-world-app
spec:
  containers:
    - name: first
      image: "gcr.io/google-samples/hello-app:2.0"
---
apiVersion: v1
kind: Pod
metadata:
  name: second-pod
  labels:
    app: hello-world-app
spec:
  containers:
    - name: second
      image: "gcr.io/google-samples/hello-app:2.0"
---
apiVersion: v1
kind: Service
metadata:
  name: first-svc
spec:
  type: ClusterIP
  selector:
    app: hello-world-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: second-svc
spec:
  type: ClusterIP
  selector:
    app: hello-world-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: svc-error8
  namespace: svc-errs
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32500 # Essa porta já está em uso
  selector:
    app: app1
---
apiVersion: v1
kind: Service
metadata:
  name: svc-error9
  namespace: svc-errs
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32500 # Conflito com service1
  selector:
    app: app2
---
apiVersion: v1
kind: Service
metadata:
  name: svc-error10
  namespace: svc-errs
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 70000
  selector:
    app: hello-world-app
---
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: hello-world-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80 # Deve corresponder a porta exposta pelo contêiner
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webapp-ingress
  annotations:
    nginx.ingress.kubernetes.io/service-upstream: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: my.kubernetes.example
      http:
        paths:
          - path: /webapp1
            pathType: Prefix
            backend:
              service:
                name: webapp1-svc
                port:
                  number: 80
          - path: /webapp2
            pathType: Prefix
            backend:
              service:
                name: webapp2-svc
                port:
                  number: 80
  defaultBackend:
    service:
      name: webapp3-svc
      port:
        number: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webapp1
  template:
    metadata:
      labels:
        app: webapp1
    spec:
      containers:
        - name: webapp1
          image: katacoda/docker-http-server:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: webapp1-svc
  labels:
    app: webapp1
spec:
  ports:
    - port: 80
  selector:
    app: webapp1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webapp2
  template:
    metadata:
      labels:
        app: webapp2
    spec:
      containers:
        - name: webapp2
          image: katacoda/docker-http-server:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: webapp2-svc
  labels:
    app: webapp2
spec:
  ports:
    - port: 80
  selector:
    app: webapp2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp3
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webapp3
  template:
    metadata:
      labels:
        app: webapp3
    spec:
      containers:
        - name: webapp3
          image: katacoda/docker-http-server:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: webapp3-svc
  labels:
    app: webapp3
spec:
  ports:
    - port: 80
  selector:
    app: webapp3
